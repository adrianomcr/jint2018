

PopAllNodes
When a robot pops all nodes it shold not be able to replan in a meeting. Currently we are placing every edge back to e_uv, but maybe it s better to only runn CPP again for all nodes.




***!!!!!!!!!************
OBS:
When, inside the 'sensor_simulator', we update the History of the robots in a meeting in the variable 'HL' this imformation is not updated in the list of histry H_all, which is obtainned from the callback. This occurs because the robots spend some time recomputing the new plann and finnishing the edges in order to accept the new plan, which contains the new history with the new lastMeetng informaion.
************!!!!!!!!!***


Redefine when the robot ends a search and when in POP all nodes - DONE


Do replanning only if the robot has not popped all nodes yet. And pop all nodes only if the robot is not "finnishing an edge".
One thing that can be done is if only one robot has popped all nodes, then they share all nodes but disregard the popped ones. This would complicate things
Use the available variable only for after popping all nodes
Use the 

Generalize the cost computation in the comparison of new plan. - DONE


Prevent a robot from searching on search points when it receives a new plan and is finishing an edge
"THE PROBLEM WITH THIS IS THAT THE MINIMUM ID ROBOT WILL KEEP SERACHING THE SPs THAT WERE ALREADY SEARCHED BY THE MAX ID ROBOT"
MAYBE CREATE A LIST OF FORBIDEN SEARCH POINTS


When in a communication graph the robots may be continuously sharing the set of unvisited nodes. In this way the robots may search in less nodes when they "pop all EDGES"


Solve the problem with the pylab library.





POP ALL EDGES ONLY IF NOT WAINTTING FOR A NEW PLAN BROADCAST

MAYBE, AFERER POOPING ALL EGDGES THE ROBOT MAY PARTICIPATE IN A COMM GRAPH, WITHOUT INCLUDING ANY OF THE POPPED EDGES


PROBLEM OF THE DEPOT POINTS !!!!!!!!!!!!!!!!! - Done




STOP THE ROBOTS WHEN POPPING ALL EDGES - Done


Modify the CPP algorithm in order to make it return different eulerian paths, at random.



When a robot is passing through an edge and it checks if this edge is equal the last element in its e_v list. This may fail when the edge is the last element od e_v but because the robot has just received a new plan and the edge was visited by another robot and coincidently was placed in the last position of the e_v list


The robot that is computting a replanning keeps countting it time while computing the replan, however, due the fact it is not moving




!!!!!!!!!!! ----------  Policy for e_g definition   ---------- !!!!!!!!!!!
When a robot makes a first replan it gets some edges in its e_g list. Currently,
Example: (r0,r3) (r0,r2) (r0,r1,r2), Here, the edges assigned to r3 in the first meeting are not in e_g of r0 anymore, since r0 has only the edges assigned to r2. Thus, robots r0, r1, r2 will consider the edges assigned to r3 in their replanning.


!!!!!!!!!!!! TO FRIDAY !!!!!!!!!!!!!!!
Change the strategy that is now avoidding the robots to communicate after hey popped all edges. In the way that it is being done it also avoids the exchange of the t_f lists. Also, we need to incorporate the strategy to allow a robot to do replanning after all edges were popped, do not considering the popped edges from it, of course.

















